data$elites_battled <- str_count(data$path_per_floor, "E")
data$relics_count <- str_count(data$relics, ",") + 1
data$deck_curse_count <- str_count(data$master_deck, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
data$curse_purge_count <- str_count(data$items_purged, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
# remove any players who didn't make it to the first campfire  - cleans out people who reset early.
data <- data[!data$campfire_choices == "[]",]
View(data)
data_victory %>%
summarise(mean_relics = mean(relics_obtained))
data_losers %>%
summarise(mean_relics = mean(relics_obtained))
data_victory %>%
group_by(floor_reached) %>%
summarise(mean_relics = mean(relics_obtained))
data_losers %>%
group_by(floor_reached) %>%
summarise(mean_relics = mean(relics_obtained))
table(data$relics)
table(data$relics_count)
table(data_victory$relics_count)
table(data_losers$relics_count)
data$deck_card_count <- str_count(data$master_deck, ",") + 1
data$deck_card_count <- str_count(data$master_deck, ",") + 1
data$elites_battled <- str_count(data$path_per_floor, "E")
data$relics_count <- str_count(data$relics, ",") + 1
data$deck_curse_count <- str_count(data$master_deck, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
data$curse_purge_count <- str_count(data$items_purged, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
# remove any players who didn't make it to the first campfire  - cleans out people who reset early.
data <- data[!data$campfire_choices == "[]",]
data$shops_visited <- str_count(data$path_per_floor "$")
data$shops_visited <- str_count(data$path_per_floor, "$")
table(data$shops_visited)
data$deck_card_count <- str_count(data$master_deck, ",") + 1
data$deck_card_count <- str_count(data$master_deck, ",") + 1
data$elites_battled <- str_count(data$path_per_floor, "E")
data$relics_count <- str_count(data$relics, ",") + 1
data$shops_visited <- str_count(data$path_per_floor, "$")
data$deck_curse_count <- str_count(data$master_deck, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
data$curse_purge_count <- str_count(data$items_purged, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
# remove any players who didn't make it to the first campfire  - cleans out people who reset early.
data <- data[!data$campfire_choices == "[]",]
data$deck_card_count <- str_count(data$master_deck, ",") + 1
data$deck_card_count <- str_count(data$master_deck, ",") + 1
data$elites_battled <- str_count(data$path_per_floor, "E")
data$relics_count <- str_count(data$relics, ",") + 1
data$shops_visited <- str_count(data$path_per_floor, "$")
data$deck_curse_count <- str_count(data$master_deck, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
data$curse_purge_count <- str_count(data$items_purged, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
# remove any players who didn't make it to the first campfire  - cleans out people who reset early.
data <- data[!data$campfire_choices == "[]",]
# make a dataset that only shows entries where victory = true
data_victory <- data %>%
filter(victory == "True")
# make a dataset just for losers
data_losers <- data %>%
filter(victory == "False")
data$shops_visited <- str_count(data$path_per_floor, "/$")
table(data$shops_visited)
data$shops_visited <- str_count(data$path_per_floor, "\$")
data$shops_visited <- str_count(data$path_per_floor, "\\$")
table(data$shops_visited)
data$deck_card_count <- str_count(data$master_deck, ",") + 1
data$deck_card_count <- str_count(data$master_deck, ",") + 1
data$elites_battled <- str_count(data$path_per_floor, "E")
data$relics_count <- str_count(data$relics, ",") + 1
data$shops_visited <- str_count(data$path_per_floor, "\\$")
data$deck_curse_count <- str_count(data$master_deck, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
data$curse_purge_count <- str_count(data$items_purged, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
# remove any players who didn't make it to the first campfire  - cleans out people who reset early.
data <- data[!data$campfire_choices == "[]",]
# make a dataset that only shows entries where victory = true
data_victory <- data %>%
filter(victory == "True")
# make a dataset just for losers
data_losers <- data %>%
filter(victory == "False")
table(data$shops_visited)
library(ggplot2)
library(tidyverse)
library(esquisse)
library(dplyr)
data <- read.csv("2020-09-30-21-09#1031.csv")
ls(data)
data$deck_card_count <- str_count(data$master_deck, ",") + 1
data$deck_card_count <- str_count(data$master_deck, ",") + 1
data$elites_battled <- str_count(data$path_per_floor, "E")
data$relics_count <- str_count(data$relics, ",") + 1
data$shops_visited <- str_count(data$path_per_floor, "\\$")
data$deck_curse_count <- str_count(data$master_deck, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
data$curse_purge_count <- str_count(data$items_purged, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
# remove any players who didn't make it to the first campfire  - cleans out people who reset early.
data <- data[!data$campfire_choices == "[]",]
# make a dataset that only shows entries where victory = true
data_victory <- data %>%
filter(victory == "True")
# make a dataset just for losers
data_losers <- data %>%
filter(victory == "False")
table(data$shops_visited)
# find the percent of players who have no curses in their deck, but have purged curses
data %>%
filter(deck_curse_count == 0) %>%
filter(curse_purge_count > 0) %>%
nrow() / nrow(data) * 100
# find the perecent of players from above who win the game
data %>%
filter(deck_curse_count == 0) %>%
filter(curse_purge_count > 0) %>%
filter(victory == "true") %>%
nrow() / nrow(data) * 100
# find the perecent of players who have at least one curse in their deck
data %>%
filter(deck_curse_count > 0) %>%
nrow() / nrow(data) * 100
## find the perecent of players from above who win the game
data %>%
filter(deck_curse_count > 0 | curse_purge_count > 0) %>%
filter(victory == "true") %>%
nrow() / nrow(data) * 100
# find the most popular curse purged
data %>%
filter(curse_purge_count > 0) %>%
group_by(items_purged) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10)
table(data$victory)
## find percent of players who won the game with no curses in their deck, but have purged curses
data_victory %>%
filter(deck_curse_count == 0) %>%
filter(curse_purge_count > 0) %>%
nrow() / nrow(data_victory) * 100
## find the percent of players who won the game with at least one curse in their deck
data_victory %>%
filter(deck_curse_count > 0) %>%
nrow() / nrow(data_victory) * 100
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
data$character_ordered <- factor(data$character_chosen, levels = character_order)
ggplot(data, aes(x = character_ordered, fill = victory)) +
geom_bar(position = "fill") +
theme_minimal()
library(forcats)
my_labeller <- labeller(victory = function(x) ifelse(x, "Success", "Failure"))
data %>%
ggplot() +
aes(x = character_ordered, fill = character_chosen) +
geom_bar(position = "dodge") +
scale_fill_manual(values = c(DEFECT = "#4BCAD0", IRONCLAD = "#C81414", THE_SILENT = "#34BA0F", WATCHER = "#BE177F"))+
facet_wrap(~victory, labeller = my_labeller) +
scale_x_discrete(labels = c("Ironclad", "Watcher", "Defect", "The Silent")) +
theme(legend.position = "none") +
labs(x = "Character", y = "Number of Games", title = "Failure and Flourish: 'Slay the Spire' Character Popularity and Success Rates")
color_palette_dark <- c(DEFECT = "#247F8F", IRONCLAD = "#660000", THE_SILENT = "#218F1F", WATCHER = "#751D6E")
color_palette_light  <- c(DEFECT = "#4BCAD0", IRONCLAD = "#C81414", THE_SILENT = "#34BA0F", WATCHER = "#BE177F")
library(png)
library(patchwork)
watcher <- readPNG("The_Watcher.png", native = TRUE)
silent <- readPNG("Silent.png", native = TRUE)
defect <- readPNG("Defect.png", native = TRUE)
ironclad <- readPNG("Ironclad.png", native = TRUE)
my_labeller <- labeller(victory = function(x) ifelse(x, "Success", "Failure"))
myviz <- data %>%
ggplot() +
aes(x = character_ordered, fill = character_chosen) +
geom_bar(position = "dodge") +
scale_fill_manual(values = c(DEFECT = "#4BCAD0", IRONCLAD = "#C81414", THE_SILENT = "#34BA0F", WATCHER = "#BE177F"))+
facet_wrap(~victory, labeller = my_labeller) +
scale_x_discrete(labels = c("Ironclad", "Watcher", "Defect", "The Silent")) +
#theme_classic() +
theme(legend.position = "none") +
labs(x = "Character", y = "Number of Games", title = "Failure and Flourish: 'Slay the Spire' Character Popularity and Success Rates")
vizandpic <- myviz +
inset_element(p = watcher,
left = 0.2,
bottom = 0.55,
right = 0.95,
top = 0.95) + theme_void() +
inset_element(p = ironclad,
left = 0.4,
bottom = 0.55,
right = 0.95,
top = 0.95) + theme_void() +
inset_element(p = defect,
left = 0.7,
bottom = 0.55,
right = 0.95,
top = 0.95) + theme_void() +
inset_element(p = silent,
left = 0.8,
bottom = 0.55,
right = 0.95,
top = 0.95) + theme_void()
vizandpic
#  regex to find the most purchased things in the items_purchased column
data_victory %>%
filter(items_purchased != "None") %>%
mutate(items_purchased = str_replace_all(items_purchased, " ", "")) %>%
mutate(items_purchased = str_replace_all(items_purchased, ",", " ")) %>%
mutate(items_purchased = str_replace_all(items_purchased, "\\[", "")) %>%
mutate(items_purchased = str_replace_all(items_purchased, "\\]", "")) %>%
separate_rows(items_purchased, sep = " ") %>%
group_by(items_purchased) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10)
data_losers %>%
filter(items_purchased != "None") %>%
mutate(items_purchased = str_replace_all(items_purchased, " ", "")) %>%
mutate(items_purchased = str_replace_all(items_purchased, ",", " ")) %>%
mutate(items_purchased = str_replace_all(items_purchased, "\\[", "")) %>%
mutate(items_purchased = str_replace_all(items_purchased, "\\]", "")) %>%
separate_rows(items_purchased, sep = " ") %>%
group_by(items_purchased) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10)
# use regex to find the most popular relics in the relics column
data_victory %>%
filter(relics != "None") %>%
mutate(relics = str_replace_all(relics, " ", "")) %>%
mutate(relics = str_replace_all(relics, ",", " ")) %>%
mutate(relics = str_replace_all(relics, "\\[", "")) %>%
mutate(relics = str_replace_all(relics, "\\]", "")) %>%
separate_rows(relics, sep = " ") %>%
group_by(relics) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10)
data_losers %>%
filter(relics != "None") %>%
mutate(relics = str_replace_all(relics, " ", "")) %>%
mutate(relics = str_replace_all(relics, ",", " ")) %>%
mutate(relics = str_replace_all(relics, "\\[", "")) %>%
mutate(relics = str_replace_all(relics, "\\]", "")) %>%
separate_rows(relics, sep = " ") %>%
group_by(relics) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10)
mean(data_victory$purchased_purges)
mean(data_losers$purchased_purges)
# use regex to find total number of elites battled: its the number of E in path_per_floor, make a new collumn
data_victory %>%
mutate(elites_battled = str_count(path_per_floor, "E")) %>%
summarise(mean(elites_battled))
data_losers %>%
mutate(elites_battled = str_count(path_per_floor, "E")) %>%
summarise(mean(elites_battled))
# find the mean number of elites battled for winners and losers based on floor_reached
data_victory %>%
group_by(floor_reached) %>%
summarise(mean_elites_battled = mean(elites_battled))
data_losers %>%
group_by(floor_reached) %>%
summarise(mean_elites_battled = mean(elites_battled))
install.packages("mekko")
library(mekko)
library(ggplot2)
library(ggforce)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
# Calculate the proportion of victories for each character
data$prop_victory <- ifelse(data$victory == "Victory", 1, 0)
prop_data <- aggregate(prop_victory ~ character_chosen, data = data, FUN = mean)
prop_data$character_ordered <- factor(prop_data$character_chosen, levels = character_order)
# Create the mekko plot
ggplot(prop_data, aes(weight = prop_victory, x = "", fill = character_ordered)) +
geom_mekko() +
scale_x_discrete(limits = "") +
theme_minimal() +
labs(fill = "Character") +
guides(fill = guide_legend(reverse = TRUE))
library(mekko)
library(ggplot2)
library(ggforce)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
# Calculate the proportion of victories for each character
data$prop_victory <- ifelse(data$victory == "Victory", 1, 0)
prop_data <- aggregate(prop_victory ~ character_chosen, data = data, FUN = mean)
prop_data$character_ordered <- factor(prop_data$character_chosen, levels = character_order)
# Create the mekko plot
ggplot(prop_data, aes(weight = prop_victory, x = "", fill = character_ordered)) +
geom_mekko() +
scale_x_discrete(limits = "") +
theme_minimal() +
labs(fill = "Character") +
guides(fill = guide_legend(reverse = TRUE))
library(ggplot2)
library(tidyverse)
library(esquisse)
library(dplyr)
library(mekko)
library(ggplot2)
library(ggforce)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
# Calculate the proportion of victories for each character
data$prop_victory <- ifelse(data$victory == "Victory", 1, 0)
prop_data <- aggregate(prop_victory ~ character_chosen, data = data, FUN = mean)
prop_data$character_ordered <- factor(prop_data$character_chosen, levels = character_order)
# Create the mekko plot
ggplot(prop_data, aes(weight = prop_victory, x = "", fill = character_ordered)) +
geom_mekko() +
scale_x_discrete(limits = "") +
theme_minimal() +
labs(fill = "Character") +
guides(fill = guide_legend(reverse = TRUE))
install.packages("ggforce")
install.packages("ggforce")
library(ggplot2)
library(ggforce)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
# Calculate the proportion of victories for each character
data$prop_victory <- ifelse(data$victory == "Victory", 1, 0)
prop_data <- aggregate(prop_victory ~ character_chosen, data = data, FUN = mean)
prop_data$character_ordered <- factor(prop_data$character_chosen, levels = character_order)
# Create the mekko plot
ggplot(prop_data, aes(weight = prop_victory, x = "", fill = character_ordered)) +
geom_mekko() +
scale_x_discrete(limits = "") +
theme_minimal() +
labs(fill = "Character") +
guides(fill = guide_legend(reverse = TRUE))
library(ggplot2)
library(ggforce)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
# Calculate the proportion of victories for each character
data$prop_victory <- ifelse(data$victory == "Victory", 1, 0)
prop_data <- aggregate(prop_victory ~ character_chosen, data = data, FUN = mean)
prop_data$character_ordered <- factor(prop_data$character_chosen, levels = character_order)
# Create the mekko plot
ggplot(prop_data, aes(weight = prop_victory, x = "", fill = character_ordered)) +
geom_mekko() +
scale_x_discrete(limits = "") +
theme_minimal() +
labs(fill = "Character") +
guides(fill = guide_legend(reverse = TRUE))
library(ggplot2)
library(tidyverse)
library(esquisse)
library(dplyr)
library(mekko)
data <- read.csv("2020-09-30-21-09#1031.csv")
ls(data)
data$deck_card_count <- str_count(data$master_deck, ",") + 1
data$deck_card_count <- str_count(data$master_deck, ",") + 1
data$elites_battled <- str_count(data$path_per_floor, "E")
data$relics_count <- str_count(data$relics, ",") + 1
data$shops_visited <- str_count(data$path_per_floor, "\\$")
data$deck_curse_count <- str_count(data$master_deck, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
data$curse_purge_count <- str_count(data$items_purged, "Clumsy|Decay|Doubt|Injury|Normality|Pain|Parasite|Pride|Regret|Shame|Writhe")
# remove any players who didn't make it to the first campfire  - cleans out people who reset early.
data <- data[!data$campfire_choices == "[]",]
# make a dataset that only shows entries where victory = true
data_victory <- data %>%
filter(victory == "True")
# make a dataset just for losers
data_losers <- data %>%
filter(victory == "False")
table(data$shops_visited)
# find the percent of players who have no curses in their deck, but have purged curses
data %>%
filter(deck_curse_count == 0) %>%
filter(curse_purge_count > 0) %>%
nrow() / nrow(data) * 100
# find the perecent of players from above who win the game
data %>%
filter(deck_curse_count == 0) %>%
filter(curse_purge_count > 0) %>%
filter(victory == "true") %>%
nrow() / nrow(data) * 100
# find the perecent of players who have at least one curse in their deck
data %>%
filter(deck_curse_count > 0) %>%
nrow() / nrow(data) * 100
## find the perecent of players from above who win the game
data %>%
filter(deck_curse_count > 0 | curse_purge_count > 0) %>%
filter(victory == "true") %>%
nrow() / nrow(data) * 100
# find the most popular curse purged
data %>%
filter(curse_purge_count > 0) %>%
group_by(items_purged) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10)
table(data$victory)
## find percent of players who won the game with no curses in their deck, but have purged curses
data_victory %>%
filter(deck_curse_count == 0) %>%
filter(curse_purge_count > 0) %>%
nrow() / nrow(data_victory) * 100
## find the percent of players who won the game with at least one curse in their deck
data_victory %>%
filter(deck_curse_count > 0) %>%
nrow() / nrow(data_victory) * 100
library(ggplot2)
library(ggforce)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
# Calculate the proportion of victories for each character
data$prop_victory <- ifelse(data$victory == "Victory", 1, 0)
prop_data <- aggregate(prop_victory ~ character_chosen, data = data, FUN = mean)
prop_data$character_ordered <- factor(prop_data$character_chosen, levels = character_order)
# Create the mekko plot
ggplot(prop_data, aes(weight = prop_victory, x = "", fill = character_ordered)) +
geom_mekko() +
scale_x_discrete(limits = "") +
theme_minimal() +
labs(fill = "Character") +
guides(fill = guide_legend(reverse = TRUE))
library(mosaic)
library(mosaic)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
# Calculate the proportion of victories for each character
data$prop_victory <- ifelse(data$victory == "Victory", 1, 0)
prop_data <- aggregate(prop_victory ~ character_chosen, data = data, FUN = mean)
prop_data$character_ordered <- factor(prop_data$character_chosen, levels = character_order)
# Create the mekko plot
gg <- mosaic(prop_data,
type = "prop",
labeling = labeling_values,
shade = TRUE,
spacing = spacing_equal,
main = "Character Victory Proportions")
library(ggmosaic)
library(mosaic)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
data$character_ordered <- factor(data$character_chosen, levels = character_order)
ggplot(data, aes(x = character_ordered, fill = victory)) +
geom_mosaic() +
theme_minimal()
# install.packages("devtools")
devtools::install_github("haleyjeppson/ggmosaic")
library(ggmosaic)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
data$character_ordered <- factor(data$character_chosen, levels = character_order)
ggplot(data, aes(x = character_ordered, fill = victory)) +
geom_mosaic() +
theme_minimal()
library(ggmosaic)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
data$character_ordered <- factor(data$character_chosen, levels = character_order)
ggplot(data, aes(x = character_ordered, fill = victory)) +
geom_mosaic() +
theme_minimal()
ggplot(data, aes(x = character_ordered)) +
geom_mosaic(aes(fill = victory)) +
theme_minimal()
library(ggmosaic)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
data$character_ordered <- factor(data$character_chosen, levels = character_order)
ggplot(data, aes(x = character_ordered)) +
geom_mosaic(aes(fill = victory)) +
theme_minimal()
library(ggmosaic)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
# Calculate the proportion of victories for each character
data$prop_victory <- ifelse(data$victory == "Victory", 1, 0)
prop_data <- aggregate(prop_victory ~ character_chosen, data = data, FUN = mean)
prop_data$character_ordered <- factor(prop_data$character_chosen, levels = character_order)
# Create the mekko plot
ggplot(prop_data, aes(x = product(character_ordered, prop_victory), fill = character_ordered)) +
geom_mosaic() +
labs(x = "Character", y = "Proportion of Victories", fill = "Character") +
scale_fill_brewer(palette = "Set1") +
theme_classic()
# Create the mekko plot
ggplot(prop_data, aes(x = product(character_ordered, prop_victory), fill = victory)) +
geom_mosaic() +
labs(x = "Character", y = "Proportion of Victories", fill = "Character") +
scale_fill_brewer(palette = "Set1") +
theme_classic()
library(ggmosaic)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
# Calculate the proportion of victories for each character
data$prop_victory <- ifelse(data$victory == "Victory", 1, 0)
prop_data <- aggregate(prop_victory ~ character_chosen, data = data, FUN = mean)
prop_data$character_ordered <- factor(prop_data$character_chosen, levels = character_order)
# Create the mekko plot
ggplot(prop_data, aes(x = product(character_ordered, prop_victory), fill = victory)) +
geom_mosaic() +
labs(x = "Character", y = "Proportion of Victories", fill = "Character") +
scale_fill_brewer(palette = "Set1") +
theme_classic()
library(ggmosaic)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
# Calculate the proportion of victories for each character
data$prop_victory <- ifelse(data$victory == "Victory", 1, 0)
prop_data <- aggregate(prop_victory ~ character_chosen, data = data, FUN = mean)
prop_data$character_ordered <- factor(prop_data$character_chosen, levels = character_order)
# Create the mekko plot
ggplot(prop_data, aes(x = product(character_ordered, prop_victory), fill = character_ordered)) +
geom_mosaic() +
labs(x = "Character", y = "Proportion of Victories", fill = "Character") +
scale_fill_brewer(palette = "Set1") +
theme_classic()
library(ggmosaic)
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
# Calculate the proportion of victories for each character
data$prop_victory <- ifelse(data$victory == "Victory", 1, 0)
prop_data <- aggregate(prop_victory ~ character_chosen, data = data, FUN = mean)
prop_data$character_ordered <- factor(prop_data$character_chosen, levels = character_order)
# Create the mekko plot
ggplot(prop_data, aes(x = "", fill = character_ordered, weight = prop_victory)) +
geom_mosaic() +
labs(x = "Character", y = "Proportion of Victories", fill = "Character") +
scale_fill_brewer(palette = "Set1") +
theme_classic()
character_order <- c("IRONCLAD", "WATCHER", "DEFECT", "THE_SILENT")
data$character_ordered <- factor(data$character_chosen, levels = character_order)
ggplot(data, aes(x = character_ordered, fill = victory)) +
geom_bar(position = "fill") +
theme_minimal()
